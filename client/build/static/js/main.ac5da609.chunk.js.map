{"version":3,"sources":["components/nav/index.js","components/upload/uploader.js","components/upload/index.js","components/guide/index.js","components/landing/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","Uploader","_ref","_ref$maxSize","maxSize","_ref$minSize","minSize","_ref$onDrop","onDrop","_ref$onReject","onReject","_onDrop","React","useCallback","acceptedFiles","length","es","onDropRejected","files","_ref2","getRootProps","getInputProps","isDragActive","Object","assign","Fragment","formatBytes","Upload","_React$useState","useState","_React$useState2","slicedToArray","setFiles","_React$useState3","_React$useState4","uploading","setUploading","asyncToGenerator","regenerator_default","mark","_callee3","f","ws","reader","wrap","_context3","prev","next","WebSocket","process","binaryType","FileReader","onload","_callee","e","_context","send","Uint8Array","target","result","stop","_x2","apply","this","arguments","onopen","_callee2","_context2","JSON","stringify","filename","name","size","readAsArrayBuffer","onclose","onmessage","msg","_JSON$parse","parse","data","id","toast","success","dlink","concat","toConsumableArray","error","close","_x","uploader","parseInt","map","key","String","rel","Guide","Landing","upload","guide","configure","autoClose","hideProgressBar","App","nav","landing","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac5da609.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navbar = ()=>(\r\n    <nav className=\"navbar\">\r\n        <div className=\"nav-left\">\r\n            <h3 className=\"nav-title\">Downme.xyz</h3>\r\n        </div>\r\n        <div className=\"nav-right\">\r\n            <a className=\"nav-item\" href=\"https://github.com/ac5tin/fileupload-go\">Github</a>\r\n        </div>\r\n    </nav>\r\n)\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport Dropzone from 'react-dropzone';\r\nimport { formatBytes } from 'usefuljs';\r\n\r\n\r\nconst Uploader = ({ maxSize=1073741824 , minSize=1, onDrop=()=>{} , onReject=()=>{} })=>{\r\n    const _onDrop = React.useCallback(acceptedFiles => {acceptedFiles.length && onDrop(acceptedFiles[0])},[onDrop]);\r\n\r\n    const _onReject = files => onReject(files);\r\n\r\n    return (\r\n        <span>\r\n            <Dropzone\r\n                minSize={minSize}\r\n                maxSize={maxSize}\r\n                onDrop={_onDrop}\r\n                onDropRejected={_onReject}\r\n            >\r\n                {({getRootProps, getInputProps,isDragActive}) => (\r\n                    <section>\r\n                        <div {...getRootProps()} className={\"border p-1 filedropper\" + (isDragActive ? \" dragging\" :\"\")}>\r\n                            <input {...getInputProps()} />\r\n                            <React.Fragment>\r\n                            {\r\n                                isDragActive ? \r\n                                <p>Drop your file here</p>: \r\n                                <p>Drag a file here (max size is {formatBytes(maxSize)}) </p>\r\n                            }\r\n                            </React.Fragment>\r\n                        </div>\r\n                    </section>\r\n                )}\r\n            </Dropzone>\r\n        </span>\r\n    )\r\n}\r\nexport default Uploader;","import React from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { formatBytes } from 'usefuljs';\r\nimport Uploader from './uploader';\r\n\r\nconst Upload = ()=>{\r\n    const [files,setFiles] = React.useState([]); // file is uploaded/done\r\n    const [uploading,setUploading] = React.useState(false);//uploading file\r\n\r\n    const onDrop = async f =>{\r\n        await setUploading(true); //uploading file\r\n\r\n        // instantiate ws connection\r\n        const ws = new WebSocket(process.env.REACT_APP_WS_ENDPOINT);\r\n        ws.binaryType = \"arraybuffer\";\r\n\r\n        let reader = new FileReader();\r\n        reader.onload = async e =>{\r\n            await ws.send(new Uint8Array(e.target.result));\r\n        }\r\n        // send start signal\r\n        // file API -> read as arraybuffer\r\n        // send arraybuffer\r\n        // send end signal\r\n        // wait for ws done signal with download link\r\n        ws.onopen = async()=>{\r\n            await ws.send(JSON.stringify({filename: f.name, size: f.size}))\r\n            reader.readAsArrayBuffer(f);\r\n        }\r\n\r\n\r\n        ws.onclose = ()=>{\r\n            //console.log('upload training data ws closed');//debug\r\n            reader = null;//gc\r\n        }\r\n        \r\n        ws.onmessage = msg =>{\r\n            const { result , id } = JSON.parse(msg.data);\r\n            if(result === \"success\" && id){\r\n                toast.success(\"Successfully uploaded file\");\r\n                f.dlink = `${process.env.REACT_APP_ADDR}/api/file/d/${id}`;\r\n                setFiles([...files,f]);\r\n            }else{\r\n                toast.error(\"Failed to upload file\");\r\n            }\r\n            setUploading(false);// done\r\n            ws.close();\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    const onReject = () =>{\r\n        toast.error('Failed to upload file');\r\n        setUploading(false);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            \r\n            {\r\n                uploading ? null :\r\n                <div className=\"row\">\r\n                    <Uploader onDrop={onDrop} onReject={onReject} maxSize={parseInt(process.env.REACT_APP_MAX_SIZE)} />\r\n                </div>\r\n                \r\n            }\r\n            {\r\n                files.length ?\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>File</th>\r\n                                <th>Status</th>\r\n                                <th>Link</th>\r\n                                <th>Size</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                files.map(f => \r\n                                    <tr key={f.name+String(f.size)}>\r\n                                        <td>{f.name}</td>\r\n                                        <td>{uploading ? \"Uploading ...\" : \"Done\"}</td>\r\n                                        <td>{f.dlink ? <a href={f.dlink}  rel=\"noopener noreferrer\" target=\"_blank\">{f.dlink}</a> : \"\"}</td>\r\n                                        <td>{formatBytes(f.size)}</td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n\r\n                :\r\n                    null\r\n            }\r\n                \r\n            \r\n        </React.Fragment>\r\n            \r\n    )\r\n}\r\nexport default Upload;\r\n","import React from 'react';\r\n\r\n\r\nconst Guide  = ()=>(\r\n    <React.Fragment>\r\n        \r\n\r\n        <div className=\"row\">\r\n            <p className=\"full_width\">Download</p>\r\n            <pre className=\"code\">\r\n                <code>$ curl {process.env.REACT_APP_ADDR}/api/file/d/FqigXPc8wD -o foo.txt</code>\r\n            </pre>\r\n        </div>\r\n        \r\n\r\n        <div className=\"row\">\r\n            <p className=\"full_width\">Upload</p>\r\n            <pre className=\"code\">\r\n                <code>$ curl -X PUT {process.env.REACT_APP_ADDR}/api/file/u/FqigXPc8wD -F file=@foo.txt</code>\r\n            </pre>\r\n        </div>\r\n        \r\n\r\n    </React.Fragment>\r\n    \r\n)\r\n\r\nexport default Guide;","import React from 'react';\r\nimport Upload from '../upload';\r\nimport Guide from '../guide';\r\n\r\nconst Landing = ()=>(\r\n    <React.Fragment>\r\n         <div className=\"section header\">\r\n            <h2 className=\"title\">File Uploader</h2>\r\n        </div>\r\n\r\n        <div className=\"section\">\r\n            <h3 className=\"subtitle\">Simple file sharing</h3>\r\n            <Upload />\r\n        </div>\r\n        <hr />\r\n        <div className=\"section\">\r\n            <h3 className=\"subtitle\">Guide</h3>\r\n            <Guide />\r\n        </div>\r\n    </React.Fragment>\r\n    \r\n)\r\n\r\nexport default Landing;\r\n","import React from 'react';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Navbar from './components/nav';\nimport Landing from './components/landing';\n\n\nimport './static/css/App.css';\nimport './static/css/simple_latest.min.css';\n\n\n// react toastify\ntoast.configure({\n    autoClose: 3000,\n    hideProgressBar: true\n})\n\nconst App = () =>{\n    return (\n        <div className=\"App\">\n            <Navbar />\n            <div className=\"container\">\n                <Landing />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}